## Kotlin Syntax :
=> 
  Example:
    fun main() {
    println("Hello World")
  }

Example explained: **Tha fun keyword is used to declare a function.
A function is a block of code designed to perform a particular task.
In the example above,it declares the main() function.

**The main() function is something you will see in every Kotlin program. 
This function is used to execute code. Any code inside the main() function's curly brackets {} will be executed.

**For example, the println() function is inside the main() function,
 meaning that this will be executed. The println() function is used to output/print text, 
 and in our example it will output "Hello World".

 ***Good To Know: In Kotlin, code statements do not have to end with a semicolon (;) (which is often required for other programming languages, such as Java, C++, C#, etc.).




 ## Kotlin Comments :
 =>Comments can be used to explain Kotlin code, and to make it more readable. It can also be used to prevent execution when testing alternative code.
  
  **Single-line comments =>

    Single-line comments starts with two forward slashes (//).
    Any text between // and the end of the line is ignored by Kotlin (will not be executed).
    This example uses a single-line comment before a line of code:

    Example:
    // This is a comment
    println("Hello World") 


  **Multi-line Comments =>

    Multi-line comments start with /* and ends with */.
    Any text between /* and */ will be ignored by Kotlin.
    This example uses a multi-line comment (a comment block) to explain the code:

    Example:
    /* The code below will print the words Hello World
    to the screen, and it is amazing */
    println("Hello World")  



## Kotlin Variables:
    =>Variables are containers for storing data values.

    To create a variable, use var or val, and assign a value to it with the equal sign (=):

Syntax
    var variableName = value
    val variableName = value

**The difference between var and val is that variables declared with the var keyword can be changed/modified, while val variables cannot.

** Notes on val
    When you create a variable with the val keyword, the value cannot be changed/reassigned.

*** Variable Names:
A variable can have a short name (like x and y) or more descriptive names (age, sum, totalVolume).

The general rule for Kotlin variables are:

Names can contain letters, digits, underscores, and dollar signs
Names should start with a letter
Names can also begin with $ and _ (but we will not use it in this tutorial)
Names are case sensitive ("myVar" and "myvar" are different variables)
Names should start with a lowercase letter and it cannot contain whitespace
Reserved words (like Kotlin keywords, such as var or String) cannot be used as names




*** kotlin Classes :

Kotlin is a programming language that runs on the Java Virtual Machine (JVM) 
and also can be compiled to JavaScript or native code.
In Kotlin, classes are blueprints for creating objects, 
which are instances of those classes.

Example :-
  class Person {
    var name: String = ""
    var age: Int = 0
}
In this example, Person is the class name. It has two properties: name and age,
   both initialized with default values.


   
*** Kotlin Constructor:-
A constructor in programming, including in Kotlin, is a special type of method
that is automatically called when an instance (object) of a class is created.
Its primary purpose is to initialize the newly created object.

In Kotlin, there are two types of constructors:

1.Primary Constructor: The primary constructor is defined in the class header. 
  It can include properties and initialization logic.

Example:-
      class Person(val name: String, val age: Int) {
    // Initialization code can be placed here
}
In this example, name and age are properties of the Person class, 
and they are initialized using the primary constructor.

2.Secondary Constructor: Secondary constructors are defined inside the class body.
 They provide additional options for object initialization, 
 but they must delegate to the primary constructor using the "this" keyword.

Example:-
  class Person {
    val name: String
    val age: Int

    constructor(name: String, age: Int) {
        this.name = name
        this.age = age
    }
}
In this example, Person class has a secondary constructor that takes name and age parameters.
  Inside the secondary constructor, the properties name and age are initialized
  using the this keyword to refer to the properties of the class.